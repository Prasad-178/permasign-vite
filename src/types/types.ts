import { type RecordMetadata } from "@pinecone-database/pinecone";

export interface ActionResult<T> {
  success: boolean; // Explicit success/failure flag
  data?: T;
  message?: string; // User-friendly message
  error?: string;   // Error details
  messageId?: string; // AO message ID for tracking
  arweaveTx?: { // Reflects only the content Arweave upload
    contentTxId?: string; // Tx for the encrypted file content
  };
}

export type DocumentCategory =
// Company Documents
'founders_agreement' | 'board_resolutions' | 'cap_table' | 'registration_certificates' | 'licences_and_certifications' |
// Investor Documents
'termsheet' | 'shareholders_agreement' | 'safe_convertible_notes' |
// Auditor Documents
'audit_report' |
// Vendor Documents
'procurement_contract' | 'quality_assurance_agreement' |
// Customer Documents
'master_service' | 'statement_of_work';

export const documentFolders = [
  {
    id: 'company',
    name: 'Company Documents',
    categories: ['founders_agreement', 'board_resolutions', 'cap_table']
  },
  {
    id: 'investor',
    name: 'Investor Documents',
    categories: ['termsheet', 'shareholders_agreement', 'safe_convertible_notes']
  },
  {
    id: 'auditor',
    name: 'Auditor Documents',
    categories: ['audit_report']
  },
  {
    id: 'vendor',
    name: 'Vendor Documents',
    categories: ['procurement_contract', 'quality_assurance_agreement']
  },
  {
    id: 'customer',
    name: 'Customer Documents',
    categories: ['master_service', 'statement_of_work']
  },
  {
    id: 'compliance',
    name: 'Compliance Documents',
    categories: ['registration_certificates', 'licences_and_certifications']
  },
];

// --- Interfaces (Updated Roles) ---
export type RoomRole = 'founder' | 'cfo' | 'investor' | 'auditor' | 'vendor' | 'customer'; // Define the allowed roles

export interface RoomInfo {
  roomId: string;
  roomName: string;
  role: RoomRole; // Use the defined type
}

// Definition for the input of the create room action
export interface CreateRoomInput {
  roomName: string;
  ownerEmail: string;
  roomPublicKeyPem: string;  // RSA Public Key in PEM format
  roomPrivateKeyPem: string; // RSA Private Key in PEM format (RAW) - sent to server for KMS
}

// Definition for the result of the create room action
export interface CreateRoomResult { // This interface should match the object structure returned by your Express API
  success: boolean;
  roomId?: string;       // Successfully created room ID
  message?: string;      // Success or error message
  error?: string;        // Error details
  messageId?: string;    // AO message ID, useful for tracking
}

export interface RoomDetails {
    roomId: string;
    roomName: string;
    ownerEmail: string;
    createdAt: number;
    members: { userEmail: string; role: RoomRole }[];
    roomPubKey?: string;
    encryptedRoomPvtKey: string;
    documentDetails: DocumentInfo[];
}
export type GetRoomDetailsResult = ActionResult<RoomDetails | null>;

export interface DocumentSignatures {
  documentId: string;
  roomId: string;
  emailToSign: string;
  signed: "false" | "true";
  roleToSign: RoomRole;
  signature: string;
}

// Structure for Add/Remove member results
export interface ModifyMemberResult extends ActionResult<null> { // Typically, no specific data is returned on success beyond a message
  success: boolean;
  message?: string;
  error?: string;
  messageId?: string; // From AO
}

// Structure for Upload Document Metadata result
export interface UploadDocumentMetadataResultData {
    documentId: string; // The document ID generated by Lua (likely msg.Id)
}
export type UploadDocumentMetadataResult = ActionResult<UploadDocumentMetadataResultData>;

// Structure for Listing Documents result (as returned by AO)
export interface DocumentInfo {
    documentId: string;
    roomId: string;
    uploaderEmail: string;
    arweaveTxId: string; // Tx for encrypted CONTENT
    encryptedSymmetricKey: string; // Base64 encoded, RoomKey-Encrypted SYMMETRIC KEY
    originalFilename: string;
    contentType: string;
    fileSize: number;
    category: DocumentCategory;
    uploadedAt: number;
    signed?: "true" | "false";
    roleToSign?: RoomRole;
    emailToSign?: string;
    signature?: string;
}
export interface RoomDocument extends DocumentInfo {}
export type ListDocumentsResult = ActionResult<DocumentInfo[]>;

// Structure for Getting Document Details result (as returned by AO)
export interface DocumentDetails extends DocumentInfo {
     // Inherits all fields from DocumentInfo, including encryptedSymmetricKey
     // No separate definition needed if DocumentInfo has all fields
}
export type GetDocumentDetailsResult = ActionResult<DocumentDetails>;

// Result for the comprehensive upload action (reflects upload outcome)
export interface UploadDocumentResultData {
    documentId: string; // The document ID generated by Lua
    contentTxId: string; // Arweave Tx for encrypted content
}
// This type alias defines the structure returned by uploadDocumentAction
export type UploadDocumentResult = ActionResult<UploadDocumentResultData | null>;

// Add interface for retrieveDocumentAction result
export interface RetrieveDocumentResultData {
    decryptedData: string;
    filename: string;
    contentType: string;
    category: DocumentCategory;
}
export type RetrieveDocumentResult = ActionResult<RetrieveDocumentResultData | null>;

// --- NEW: Interface for Pinecone Chunk Metadata ---
// This defines the expected structure within Pinecone's metadata field
export interface PineconeChunkMetadata extends RecordMetadata {
    documentId: string;
    originalFilename: string;
    chunkIndex: number;
    encryptedChunkText: string; // Base64 encoded encrypted chunk
    iv: string; // Base64 encoded IV
    authTag: string; // Base64 encoded AuthTag
}

// --- NEW: Interface for Retrieve Chunks Action Result ---
export interface RetrievedChunkInfo {
    vectorId: string; // e.g., documentId-chunk-index
    score: number; // Relevance score from Pinecone
    documentId: string;
    originalFilename: string;
    chunkIndex: number;
    encryptedChunkText: string; // Base64 encoded
    iv: string; // Base64 encoded
    authTag: string; // Base64 encoded
    pageNumber?: number; // Added optional page number
}
export type RetrieveChunksResult = ActionResult<RetrievedChunkInfo[]>;

// --- NEW: Interfaces/Types for Chat ---
export interface ChatMessage {
    role: 'user' | 'assistant' | 'system' | 'error'; // Added 'error' role for UI
    content: string;
    // Optional: Add timestamp or other metadata if needed
}

// Result type for the chat action
export type ChatResult = ActionResult<ChatMessage>; // Returns the single assistant message or error

// Map to cache decrypted symmetric keys during a single chat action call
export type SymmetricKeyCache = Map<string, Buffer>;
// Map to cache document details during a single chat action call
export type DocumentDetailsCache = Map<string, DocumentDetails>;

// Re-define constants client-side for immediate validation feedback (optional but good UX)
export const MAX_FILE_SIZE_MB = 100;
export const MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024;
export const ACCEPTED_FILE_TYPES = [
  "application/pdf", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  "text/plain", "image/jpeg", "image/png", "image/gif", "application/vnd.ms-excel",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/zip"
];
export const ACCEPTED_FILE_TYPES_STRING = ACCEPTED_FILE_TYPES.join(",");

export const roleSpecificCategories = {
  founder: [
    'founders_agreement', 'board_resolutions', 'cap_table',
    'registration_certificates', 'licences_and_certifications'
  ],
  cfo: [
    'founders_agreement', 'board_resolutions', 'cap_table',
    'registration_certificates', 'licences_and_certifications'
  ],
  investor: ['termsheet', 'shareholders_agreement', 'safe_convertible_notes'],
  auditor: ['audit_report'],
  vendor: ['procurement_contract', 'quality_assurance_agreement'],
  customer: ['master_service', 'statement_of_work']
};

// Add category map for display
export const documentCategories: { value: DocumentCategory; label: string }[] = [
  // Company Documents
  { value: 'founders_agreement', label: 'Founders Agreement' },
  { value: 'board_resolutions', label: 'Board Resolutions' },
  { value: 'cap_table', label: 'Cap Table' },
  { value: 'registration_certificates', label: 'Registration Certificates' },
  { value: 'licences_and_certifications', label: 'Licences & Certifications' },

  // Investor Documents
  { value: 'termsheet', label: 'Term Sheet' },
  { value: 'shareholders_agreement', label: 'Shareholders Agreement' },
  { value: 'safe_convertible_notes', label: 'SAFE / Convertible Notes' },

  // Auditor Documents
  { value: 'audit_report', label: 'Audit Report' },

  // Vendor Documents
  { value: 'procurement_contract', label: 'Procurement Contract' },
  { value: 'quality_assurance_agreement', label: 'Quality Assurance Agreement' },

  // Customer Documents
  { value: 'master_service', label: 'Master Service Agreement' },
  { value: 'statement_of_work', label: 'Statement of Work' },
];

export const allowedCategoriesByRole: Record<RoomRole | 'default', DocumentCategory[]> = {
  founder: [
    // Company Documents
    'founders_agreement', 'board_resolutions', 'cap_table', 'registration_certificates', 'licences_and_certifications',
    // Investor Documents
    'termsheet', 'shareholders_agreement', 'safe_convertible_notes',
    // Auditor Documents
    'audit_report',
    // Vendor Documents
    'procurement_contract', 'quality_assurance_agreement',
    // Customer Documents
    'master_service', 'statement_of_work'
  ],
  cfo: [
    // Company Documents
    'founders_agreement', 'board_resolutions', 'cap_table', 'registration_certificates', 'licences_and_certifications',
    // Investor Documents
    'termsheet', 'shareholders_agreement', 'safe_convertible_notes',
    // Auditor Documents
    'audit_report',
    // Vendor Documents
    'procurement_contract', 'quality_assurance_agreement',
    // Customer Documents
    'master_service', 'statement_of_work'
  ],
  investor: ['termsheet', 'shareholders_agreement', 'safe_convertible_notes'],
  auditor: ['audit_report'],
  vendor: ['procurement_contract', 'quality_assurance_agreement'],
  customer: ['master_service', 'statement_of_work'],
  default: [], // Default case (no permissions or unknown role)
};

export const EMBEDDING_MODEL = 'text-embedding-3-small';
export const EMBEDDING_DIMENSIONS = 1536;

export const TEXT_SPLITTER_CHUNK_SIZE = 1000;
export const TEXT_SPLITTER_CHUNK_OVERLAP = 150;

export const RAG_SUPPORTED_TEXT_TYPES = [
  'text/plain',
  'text/csv',
  'text/html',
  'application/json',
  'application/pdf'
];

// Input for the add member action
export interface AddMemberInput {
  roomId: string;
  callerEmail: string;
  newUserEmail: string;
  newUserRole: RoomRole;
}

// Input for the remove member action
export interface RemoveMemberInput {
  roomId: string;
  callerEmail: string;
  userToRemoveEmail: string;
}

// --- Retrieve Document Types ---
export interface RetrieveDocumentApiInput {
  documentId: string;
  userEmail: string;
  decryptedRoomPrivateKeyPem: string;
}

// --- Sign Document Types ---
export interface SignDocumentApiInput {
  documentId: string;
  roomId: string;
  emailToSign: string;
  signature: string; // Hex signature
  roleToSign: RoomRole;
}

// Result type for the sign document action
// The original server action returned ActionResult<RoomInfo[]> on success
// and a standard error structure on failure.
export interface SignDocumentResult extends ActionResult<RoomInfo[] | null> { // Data can be RoomInfo[] or null
    // Inherits success, message, error, messageId from ActionResult
}

// Input for the upload document API endpoint
export interface UploadDocumentApiInput {
  roomId: string;
  uploaderEmail: string;
  category: DocumentCategory; // Assuming DocumentCategory is defined
  role: RoomRole; // Assuming RoomRole is defined
  roomPubKey: string;

  // File-specific data
  fileName: string;
  fileType: string; // MIME type
  fileDataB64: string; // Base64 encoded file content
  fileSize: number; // Original file size for reference
}

// Input for the decrypt KMS API endpoint
export interface DecryptKmsApiInput {
  ciphertextBase64: string;
}

// Expected structure of the successful data part of the API response for decrypt KMS
export interface DecryptKmsSuccessData {
  plaintext: string;
}

// Result type from the /api/actions/decrypt-kms endpoint
// This should align with what your Express route returns, including potential errors.
export interface DecryptKmsApiResponse extends ActionResult<DecryptKmsSuccessData | null> {
  // Inherits success, error, message from ActionResult
  // data will be { plaintext: string } on success, or null/undefined on error
}
